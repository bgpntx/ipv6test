services:
  app:
    image: golang:1.22-alpine
    container_name: ipv6test-go
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8080/ip || (sleep 2; wget -qO- http://127.0.0.1:8080/ip)"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s
    environment:
      - GIN_MODE=release
    command: >
      sh -c 'cat >/main.go << "EOF"
      package main

      import (
        "encoding/json"
        "log"
        "net"
        "net/http"
        "os"
        "strings"
      )

      func normalize(ip string) string {
        ip = strings.TrimSpace(ip)
        if i := strings.Index(ip, "%"); i != -1 { ip = ip[:i] }
        ip = strings.TrimPrefix(ip, "::ffff:")
        return ip
      }

      func extractIPs(r *http.Request) (ipv4, ipv6, rawXFF, remote string) {
        rawXFF = r.Header.Get("X-Forwarded-For")
        cf := r.Header.Get("CF-Connecting-IP")
        if cf != "" {
          if ip := net.ParseIP(normalize(cf)); ip != nil {
            if ip.To4() != nil { ipv4 = ip.String() } else { ipv6 = ip.String() }
          }
        }
        if ipv4 == "" || ipv6 == "" {
          if rawXFF != "" {
            for _, p := range strings.Split(rawXFF, ",") {
              ip := net.ParseIP(normalize(p))
              if ip == nil { continue }
              if ip.To4() != nil && ipv4 == "" { ipv4 = ip.String() }
              if ip.To4() == nil && ipv6 == "" { ipv6 = ip.String() }
              if ipv4 != "" && ipv6 != "" { break }
            }
          }
        }
        host, _, err := net.SplitHostPort(r.RemoteAddr)
        if err == nil {
          remote = normalize(host)
          if (ipv4 == "" && ipv6 == "") {
            if ip := net.ParseIP(remote); ip != nil {
              if ip.To4() != nil { ipv4 = remote } else { ipv6 = remote }
            }
          }
        }
        return
      }

      func jsonHandler(w http.ResponseWriter, r *http.Request) {
        ipv4, ipv6, xff, remote := extractIPs(r)
        w.Header().Set("Content-Type", "application/json")
        _ = json.NewEncoder(w).Encode(map[string]string{
          "ipv4": ipv4, "ipv6": ipv6, "x_forwarded_for": xff, "remote_addr": remote, "ua": r.UserAgent(),
        })
      }

      func textHandler(w http.ResponseWriter, r *http.Request) {
        ipv4, ipv6, _, _ := extractIPs(r)
        w.Header().Set("Content-Type", "text/plain; charset=utf-8")
        if ipv6 != "" { w.Write([]byte(ipv6 + "\n")); return }
        if ipv4 != "" { w.Write([]byte(ipv4 + "\n")); return }
        w.WriteHeader(http.StatusNoContent)
      }

      func main() {
        mux := http.NewServeMux()
        mux.HandleFunc("/", textHandler)
        mux.HandleFunc("/ip", jsonHandler)
        addr := ":8080"
        if v := os.Getenv("PORT"); v != "" { addr = ":" + v }
        log.Printf("Go IP service listening on %s", addr)
        log.Fatal(http.ListenAndServe(addr, mux))
      }
      EOF
      && go run /main.go'
